let abs(x:real):real = if x > 0.0 then x else -x



let  Between(x, min, max : real) : bool = ((min < x) and (x < max))
node between (min, max : real) returns (x:real) = 
   loop ((min < x) and (x < max))

-- saw shark curves

node up(init, delta:real) returns( x : real) = 
   x = init fby loop { Between(x, pre x, pre x + delta) }

node down(init, delta:real) returns( x : real) = 
   x = init fby loop { Between(x, pre x - delta, pre x) }
   
node up_and_down(min, max, delta : real) returns (x : real) =   
   Between(x, min, max)
 fby
   loop {
        | run x := up(pre x, delta)   in loop { x < max }
        | run x := down(pre x, delta) in loop { x > min }
       }

node up_and_down2(min, max, delta : real) returns (x : real) =   
   Between(x, min, max)
 fby
   loop 
     exist lmin, lmax,ldelta : real in
     run lmin   := between(min, pre x) in
     run lmax   := between(pre x, max) in
     run ldelta := between(0., delta) in
      {
        | run x := up(pre x, ldelta)   in loop { x < lmax }
        | run x := down(pre x, ldelta) in loop { x > lmin }
       }



node carlight_env(is_on:bool)
returns(switch_pos: int [0;2];intensity: real [50.0;90.0]) =
--   run intensity := up_and_down(50.0, 90.0, 1.0) in
   true fby
   assert (abs(intensity-pre intensity) < 3.0) in
   loop
     { | loop true
       |10: loop [15,30] switch_pos = 2
       }
