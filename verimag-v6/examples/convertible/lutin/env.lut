-- Time-stamp: <modified the 16/09/2016 (at 11:21) by Erwan Jahier>
-- 
include "realGen.lut"

node env1(Danger, Locked : bool; Speed, Hood_Speed :real) 
returns(Start, Parked, Rot, Tic, OnOff, Done: bool ; Distance:real ) =
 loop true

-- With a scenario
let geneRotTic(Start, Rot, Tic,Danger:bool) : trace =
 let accel =  {{ | 1: not Rot | 5: Rot } &> { | 5: not Tic | 1: Tic } &>
                 Start -- &> not Danger
                 }
                 in
 let decel =  {{ | 5: not Rot | 1: Rot } &> { | 1: not Tic | 5: Tic } } in
 let stop = not Rot and Tic in
-- XXX le 'not Start' est-it utile ???
-- let decel =  {{ | 5: not Rot | 1: Rot } &> not Start} in
-- loop [50] not Rot fby 
 loop { loop [0,300] accel fby
        loop [50] true fby
        loop [0,300] decel fby
        loop [60,300] stop 
        }
-- loop { loop [0,300] decel fby loop [0,300] accel }

node env2(Danger, Locked : bool; Speed, Hood_Speed :real) 
returns(Start, Parked, Rot, Tic, OnOff, Done: bool ; Distance:real [0.0;3000.0]) =
 run Distance := up_and_down2(0.0, 500.0, 5.0) in
 (not Start and not Rot and not Tic) fby--beware: Danger=nil at the first instant! 
 {
   geneRotTic(Start, Rot, Tic, Danger)
 &>
   loop { OnOff and Parked and Done fby loop [10] not Done } 

 }
-- Forbidding impossible inputs
node env3(Danger, Locked : bool; Speed, Hood_Speed :real) 
returns(Start, Parked, Rot, Tic, OnOff, Done: bool ; Distance:real) =
 {
   loop { not (OnOff and Start) and (Parked => not Rot) }
   &>
   true fby loop { (Speed > 0.0 => not Parked) }
   &>
   true fby loop { Hood_Speed > 0.0 => not Done }  
 }

-- With a scenario + Forbidding impossible inputs
node env4(Danger, Locked : bool; Speed, Hood_Speed :real ) 
returns(Start, Parked, Rot, Tic, OnOff, Done: bool ; Distance:real) =
 run Distance := up_and_down2(0.0, 500.0, 5.0) in
 true fby -- to avoid the need of inputs at the first instant
   {
     geneRotTic(Start, Rot, Tic,Danger) 
   &>
     loop { Hood_Speed > 0.0 => not Done }  
   &>
     loop { (Speed > 0.0 => not Parked) }
   &>
     loop {not (OnOff and Start) and (Parked => not Rot)}  
   }


-- nb: in real life, Distance would actually depends on the cat
-- Speed. But for testing or WCET purposes, it does not really
-- matter.



-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-- In order to test subnodes
node speed(Speed:real) returns(Start, Parked, Rot,Tic,OnOff,Done:bool) =
 let Danger = (Speed > 130.0) in
-- more Tic ?
--  { not Tic | 2: Tic }
 let accel =  {{ | 1: not Rot | 5: Rot } &> Start &> not Danger} in
 let decel =  {{ | 5: not Rot | 1: Rot } &> not Start} in
--  loop [100] true fby
 loop [50] not Rot fby 
 loop { loop [0,300]  -- assert Speed < 150.0 in 
                     { decel } fby 
        loop [0,300] accel }

node action_hood() returns (Tic:bool) = loop true -- Tic

node hood(Hood_Speed:real) returns (Tic, Parked, OnOff, Done: bool) = 
   assert Tic and Parked  in
    {
       true fby loop { Done = (Hood_Speed = 0.0) }
    &>
       loop { loop [0,10] not OnOff fby OnOff fby loop (not OnOff) and (not Done) } 
    }
   
let abs(x:real) = if x > 0.0 then x else -x

node vehicle() 
returns (Start, Locked:bool ; Speed, Distance : real [0.0; 2000.0]) = 
   Speed = 0.0 fby loop abs(Speed-pre Speed) < 0.5 and abs(Distance-pre Distance)<3.0 


node may_collide() returns (Speed, Distance:real [0.0;2000.0]) = 
  Speed = 0.0 and Distance = 1000.0 fby
  assert abs(Speed-pre Speed) < 0.5 in
  assert abs(Distance-pre Distance)<3.0 in
  loop 
     true
   
node hood_speed(Hood_Speed:real) returns (Tic:bool) = loop true
