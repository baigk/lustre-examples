-- Time-stamp: <modified the 10/02/2018 (at 17:37) by Erwan Jahier>
-- 
include "realGen.lut"

node env1(Speed, Roof_Speed :real) 
returns(Start, Parked, Rot, Tick, OnOff, Done: bool ; Dist:real ) =
 loop true


-- Forbidding impossible inputs
node env2(Speed,Roof_Speed:real) returns(
Start,Parked,Rot,Tick,OnOff,Done:bool; Dist:real) =
{
   loop { not (OnOff and Start) } -- H1
&> loop { Parked => not Rot     } -- H2
&> true fby loop {
      ( Speed > 0.0 => not Parked    ) -- H3
  and ( Roof_Speed > 0.0 => not Done ) -- H4
  }
}

-- With a scenario
let geneRotTick(Start, Rot, Tick,Danger:bool) : trace =
 let accel =  {{ | 1: not Rot | 5: Rot } &> { | 5: not Tick | 1: Tick } &>
                 Start &> not Danger }
 in
 let decel =  {{ | 5: not Rot | 1: Rot } &> { | 1: not Tick | 5: Tick } } in
 let stop = not Rot and Tick in
 loop [50] not Rot fby 
 loop { loop [0,300] accel fby
--        loop [50] true fby  
        loop [0,300] decel fby
        loop [60,300] stop 
        }
-- loop { loop [0,300] decel fby loop [0,300] accel }
node env3(Danger, Locked : bool; Speed:real) 
returns(Start, Parked, Rot, Tick, OnOff, Done: bool ; Dist:real) =
 run Dist := up_down(0.0, 500.0, 5.0) in
   not (Start or Rot or Tick)  
   fby geneRotTick(Start, Rot, Tick, Danger)
-- 
--&> loop { OnOff and Parked and Done fby loop [10] not Done } 



-- With a scenario + Forbidding impossible inputs
node env4(Danger:bool;Speed,Roof_Speed:real) returns 
(Start,Parked,Rot,Tick,OnOff,Done:bool; Dist:real) =
 run Dist := up_down(0.0, 500.0, 5.0) in
 {   
   loop { not (OnOff and Start) } -- H1
&> loop { Parked => not Rot     } -- H2
&> true fby loop {
      ( Speed > 0.0 => not Parked    ) -- H3
  and ( Roof_Speed > 0.0 => not Done ) -- H4
   }
&> not (Start or Rot or Tick) fby 
   geneRotTick(Start, Rot, Tick, Danger)
 }

-- nb: in real life, Dist would actually depends on the vehicle
-- Speed. But for testing or WCET purposes, it does not really
-- matter.



-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-- In order to test subnodes
node speed(Speed:real) returns(Start, Parked, Rot,Tick,OnOff,Done:bool) =
 let Danger = (Speed > 130.0) in
-- more Tick ?
--  { not Tick | 2: Tick }
 let accel =  {{ | 1: not Rot | 5: Rot } &> Start &> not Danger} in
 let decel =  {{ | 5: not Rot | 1: Rot } &> not Start} in
--  loop [100] true fby
 loop [50] not Rot fby 
 loop { loop [0,300]  -- assert Speed < 150.0 in 
                     { decel } fby 
        loop [0,300] accel }

node action_roof() returns (Tick:bool) = loop true -- Tick

node roof(Roof_Speed:real) returns (Tick, Parked, OnOff, Done: bool) = 
   assert Tick and Parked  in
    {
       true fby loop { Done = (Roof_Speed = 0.0) }
    &>
       loop { loop [0,10] not OnOff fby OnOff fby loop (not OnOff) and (not Done) } 
    }
   
let abs(x:real) = if x > 0.0 then x else -x

node vehicle() 
returns (Start, Locked:bool ; Speed, Dist : real [0.0; 2000.0]) = 
   Speed = 0.0 fby loop abs(Speed-pre Speed) < 0.5 and abs(Dist-pre Dist)<3.0 


node may_collide() returns (Speed, Dist:real [0.0;2000.0]) = 
  Speed = 0.0 and Dist = 1000.0 fby
  assert abs(Speed-pre Speed) < 0.5 in
  assert abs(Dist-pre Dist)<3.0 in
  loop 
     true
   
node roof_speed(Roof_Speed:real) returns (Tick:bool) = loop true
